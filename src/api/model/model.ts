//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */

// ReSharper disable InconsistentNaming

import { Account } from './account';
import { Owned } from './owned';

export class JsonPatchDocumentOfBuilding {
  operations?: OperationOfBuilding[] | undefined;
  contractResolver?: IContractResolver | undefined;

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['operations'])) {
        this.operations = [] as any;
        for (let item of _data['operations'])
          this.operations!.push(OperationOfBuilding.fromJS(item));
      }
      this.contractResolver = _data['contractResolver']
        ? IContractResolver.fromJS(_data['contractResolver'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): JsonPatchDocumentOfBuilding {
    data = typeof data === 'object' ? data : {};
    let result = new JsonPatchDocumentOfBuilding();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.operations)) {
      data['operations'] = [];
      for (let item of this.operations) data['operations'].push(item.toJSON());
    }
    data['contractResolver'] = this.contractResolver
      ? this.contractResolver.toJSON()
      : <any>undefined;
    return data;
  }
}

export class OperationBase {
  operationType!: OperationType;
  path?: string | undefined;
  op?: string | undefined;
  from?: string | undefined;

  init(_data?: any) {
    if (_data) {
      this.operationType = _data['operationType'];
      this.path = _data['path'];
      this.op = _data['op'];
      this.from = _data['from'];
    }
  }

  static fromJS(data: any): OperationBase {
    data = typeof data === 'object' ? data : {};
    let result = new OperationBase();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['operationType'] = this.operationType;
    data['path'] = this.path;
    data['op'] = this.op;
    data['from'] = this.from;
    return data;
  }
}

export class Operation extends OperationBase {
  value?: any | undefined;

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.value = _data['value'];
    }
  }

  static fromJS(data: any): Operation {
    data = typeof data === 'object' ? data : {};
    let result = new Operation();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['value'] = this.value;
    super.toJSON(data);
    return data;
  }
}

export class OperationOfBuilding extends Operation {
  init(_data?: any) {
    super.init(_data);
  }

  static fromJS(data: any): OperationOfBuilding {
    data = typeof data === 'object' ? data : {};
    let result = new OperationOfBuilding();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    super.toJSON(data);
    return data;
  }
}

export enum OperationType {
  Add = 'Add',
  Remove = 'Remove',
  Replace = 'Replace',
  Move = 'Move',
  Copy = 'Copy',
  Test = 'Test',
  Invalid = 'Invalid',
}

export abstract class IContractResolver {
  init(_data?: any) {}

  static fromJS(data: any): IContractResolver {
    data = typeof data === 'object' ? data : {};
    throw new Error(
      "The abstract class 'IContractResolver' cannot be instantiated.",
    );
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    return data;
  }
}

export class Campaign extends Owned {
  name!: string;
  type!: CampaignType;
  players?: AccountCampaign[] | undefined;

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.name = _data['name'];
      this.type = _data['type'];
      if (Array.isArray(_data['players'])) {
        this.players = [] as any;
        for (let item of _data['players'])
          this.players!.push(AccountCampaign.fromJS(item));
      }
    }
  }

  static fromJS(data: any): Campaign {
    data = typeof data === 'object' ? data : {};
    let result = new Campaign();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['name'] = this.name;
    data['type'] = this.type;
    if (Array.isArray(this.players)) {
      data['players'] = [];
      for (let item of this.players) data['players'].push(item.toJSON());
    }
    super.toJSON(data);
    return data;
  }
}

export enum CampaignType {
  FiveE = 'FiveE',
  PathFinderOne = 'PathFinderOne',
  PathFinderTwo = 'PathFinderTwo',
}

export class AccountCampaign {
  accountId!: string;
  account?: Account | undefined;
  campaignId!: string;
  campaign?: Campaign | undefined;

  init(_data?: any) {
    if (_data) {
      this.accountId = _data['accountId'];
      this.account = _data['account']
        ? Account.fromJS(_data['account'])
        : <any>undefined;
      this.campaignId = _data['campaignId'];
      this.campaign = _data['campaign']
        ? Campaign.fromJS(_data['campaign'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): AccountCampaign {
    data = typeof data === 'object' ? data : {};
    let result = new AccountCampaign();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['accountId'] = this.accountId;
    data['account'] = this.account ? this.account.toJSON() : <any>undefined;
    data['campaignId'] = this.campaignId;
    data['campaign'] = this.campaign ? this.campaign.toJSON() : <any>undefined;
    return data;
  }
}

export class JsonPatchDocumentOfCampaign {
  operations?: OperationOfCampaign[] | undefined;
  contractResolver?: IContractResolver | undefined;

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['operations'])) {
        this.operations = [] as any;
        for (let item of _data['operations'])
          this.operations!.push(OperationOfCampaign.fromJS(item));
      }
      this.contractResolver = _data['contractResolver']
        ? IContractResolver.fromJS(_data['contractResolver'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): JsonPatchDocumentOfCampaign {
    data = typeof data === 'object' ? data : {};
    let result = new JsonPatchDocumentOfCampaign();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.operations)) {
      data['operations'] = [];
      for (let item of this.operations) data['operations'].push(item.toJSON());
    }
    data['contractResolver'] = this.contractResolver
      ? this.contractResolver.toJSON()
      : <any>undefined;
    return data;
  }
}

export class OperationOfCampaign extends Operation {
  init(_data?: any) {
    super.init(_data);
  }

  static fromJS(data: any): OperationOfCampaign {
    data = typeof data === 'object' ? data : {};
    let result = new OperationOfCampaign();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    super.toJSON(data);
    return data;
  }
}

export class JsonPatchDocumentOfContinent {
  operations?: OperationOfContinent[] | undefined;
  contractResolver?: IContractResolver | undefined;

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['operations'])) {
        this.operations = [] as any;
        for (let item of _data['operations'])
          this.operations!.push(OperationOfContinent.fromJS(item));
      }
      this.contractResolver = _data['contractResolver']
        ? IContractResolver.fromJS(_data['contractResolver'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): JsonPatchDocumentOfContinent {
    data = typeof data === 'object' ? data : {};
    let result = new JsonPatchDocumentOfContinent();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.operations)) {
      data['operations'] = [];
      for (let item of this.operations) data['operations'].push(item.toJSON());
    }
    data['contractResolver'] = this.contractResolver
      ? this.contractResolver.toJSON()
      : <any>undefined;
    return data;
  }
}

export class OperationOfContinent extends Operation {
  init(_data?: any) {
    super.init(_data);
  }

  static fromJS(data: any): OperationOfContinent {
    data = typeof data === 'object' ? data : {};
    let result = new OperationOfContinent();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    super.toJSON(data);
    return data;
  }
}

export class JsonPatchDocumentOfMonster {
  operations?: OperationOfMonster[] | undefined;
  contractResolver?: IContractResolver | undefined;

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['operations'])) {
        this.operations = [] as any;
        for (let item of _data['operations'])
          this.operations!.push(OperationOfMonster.fromJS(item));
      }
      this.contractResolver = _data['contractResolver']
        ? IContractResolver.fromJS(_data['contractResolver'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): JsonPatchDocumentOfMonster {
    data = typeof data === 'object' ? data : {};
    let result = new JsonPatchDocumentOfMonster();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.operations)) {
      data['operations'] = [];
      for (let item of this.operations) data['operations'].push(item.toJSON());
    }
    data['contractResolver'] = this.contractResolver
      ? this.contractResolver.toJSON()
      : <any>undefined;
    return data;
  }
}

export class OperationOfMonster extends Operation {
  init(_data?: any) {
    super.init(_data);
  }

  static fromJS(data: any): OperationOfMonster {
    data = typeof data === 'object' ? data : {};
    let result = new OperationOfMonster();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    super.toJSON(data);
    return data;
  }
}

export class JsonPatchDocumentOfNpc {
  operations?: OperationOfNpc[] | undefined;
  contractResolver?: IContractResolver | undefined;

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['operations'])) {
        this.operations = [] as any;
        for (let item of _data['operations'])
          this.operations!.push(OperationOfNpc.fromJS(item));
      }
      this.contractResolver = _data['contractResolver']
        ? IContractResolver.fromJS(_data['contractResolver'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): JsonPatchDocumentOfNpc {
    data = typeof data === 'object' ? data : {};
    let result = new JsonPatchDocumentOfNpc();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.operations)) {
      data['operations'] = [];
      for (let item of this.operations) data['operations'].push(item.toJSON());
    }
    data['contractResolver'] = this.contractResolver
      ? this.contractResolver.toJSON()
      : <any>undefined;
    return data;
  }
}

export class OperationOfNpc extends Operation {
  init(_data?: any) {
    super.init(_data);
  }

  static fromJS(data: any): OperationOfNpc {
    data = typeof data === 'object' ? data : {};
    let result = new OperationOfNpc();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    super.toJSON(data);
    return data;
  }
}

export class JsonPatchDocumentOfRegion {
  operations?: OperationOfRegion[] | undefined;
  contractResolver?: IContractResolver | undefined;

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['operations'])) {
        this.operations = [] as any;
        for (let item of _data['operations'])
          this.operations!.push(OperationOfRegion.fromJS(item));
      }
      this.contractResolver = _data['contractResolver']
        ? IContractResolver.fromJS(_data['contractResolver'])
        : <any>undefined;
    }
  }

  static fromJS(data: any): JsonPatchDocumentOfRegion {
    data = typeof data === 'object' ? data : {};
    let result = new JsonPatchDocumentOfRegion();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.operations)) {
      data['operations'] = [];
      for (let item of this.operations) data['operations'].push(item.toJSON());
    }
    data['contractResolver'] = this.contractResolver
      ? this.contractResolver.toJSON()
      : <any>undefined;
    return data;
  }
}

export class OperationOfRegion extends Operation {
  init(_data?: any) {
    super.init(_data);
  }

  static fromJS(data: any): OperationOfRegion {
    data = typeof data === 'object' ? data : {};
    let result = new OperationOfRegion();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    super.toJSON(data);
    return data;
  }
}

export interface FileResponse {
  data: Blob;
  status: number;
  fileName?: string;
  headers?: { [name: string]: any };
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any,
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

export function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any,
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}
