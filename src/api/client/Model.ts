//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

export interface JsonPatchDocumentOfBuilding {
  operations?: OperationOfBuilding[] | undefined;
  contractResolver?: IContractResolver | undefined;
}

export interface OperationBase {
  operationType: OperationType;
  path?: string | undefined;
  op?: string | undefined;
  from?: string | undefined;
}

export interface Operation extends OperationBase {
  value?: any | undefined;
}

export interface OperationOfBuilding extends Operation {}

export enum OperationType {
  Add = 'Add',
  Remove = 'Remove',
  Replace = 'Replace',
  Move = 'Move',
  Copy = 'Copy',
  Test = 'Test',
  Invalid = 'Invalid',
}

export interface IContractResolver {}

export interface JsonPatchDocumentOfCampaign {
  operations?: OperationOfCampaign[] | undefined;
  contractResolver?: IContractResolver | undefined;
}

export interface OperationOfCampaign extends Operation {}

export interface JsonPatchDocumentOfContinent {
  operations?: OperationOfContinent[] | undefined;
  contractResolver?: IContractResolver | undefined;
}

export interface OperationOfContinent extends Operation {}

export interface JsonPatchDocumentOfMonster {
  operations?: OperationOfMonster[] | undefined;
  contractResolver?: IContractResolver | undefined;
}

export interface OperationOfMonster extends Operation {}

export interface JsonPatchDocumentOfNpc {
  operations?: OperationOfNpc[] | undefined;
  contractResolver?: IContractResolver | undefined;
}

export interface OperationOfNpc extends Operation {}

export interface JsonPatchDocumentOfRegion {
  operations?: OperationOfRegion[] | undefined;
  contractResolver?: IContractResolver | undefined;
}

export interface OperationOfRegion extends Operation {}

export interface FileResponse {
  data: Blob;
  status: number;
  fileName?: string;
  headers?: { [name: string]: any };
}

export class ApiException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any,
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

export function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any,
): any {
  if (result !== null && result !== undefined) throw result;
  else throw new ApiException(message, status, response, headers, null);
}
